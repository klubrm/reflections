What happens when you initialize a repository? Why do you need to do it?

Initializing a repository essentially creates a repository with files in your directory. This allows one to then utilize the benefits of git for version control with these files, like creating commits and documenting changes to programs when necessary.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a temporary location to keep files in before making a commit. This allows the progammer to choose which files are being added to the commit, thereby granting them more control regarding what is being added to the repository and when.

How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to make sure you have one commit per logical change by only adding what file you have changed to the staging area, thereby only updating that file in the commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

One situation when a branch would be helpful would be when you are making a different version of an application. This way you could keep the master branch, and the original program, unaffected by changes to the alternate version. Another situation branches are helpful is when you want to experiment with the application. As stated, this experimentation won't affect the main branch of the program so you can try some radical changes with no fear of breaking your application.

How do the diagrams help you visualize the branch structure?

Diagrams help you visualize the branch structure because they can represent the pattern in which commits are stored and how they are related to one another.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together incorporates all of the changes from the two branches into one branch, so all commits are still accessible.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

One pro of automatic merging is the time-saving aspect of this method. 